优化：
1.提升开发体验

source map(源代码映射) 构建后代码和源代码映射，方便出错后映射到源代码
source-map:即关心行又关心列（适用于生产环境）
cheap-source-map:只关心行

2.提升打包速度

2.1  HotModuleReplacementPlugin（HMR）
开发环境开启
 devServer:{
      hot:false,  //开启HMR
    },

//js的热模块替换，如果后期使用react库不用写，因为库里面已设置
if (module.hot) {
    module.hot.accept('./js/count', function() {
      // 对更新过的 library 模块做些事情...

    });
  }

2.2 Rule.oneOf 当规则匹配时，只使用第一个匹配规则,不再判断后面的规则

2.3 exclude  排除node_modules里面的文件，处理剩下的文件，只针对js文件处理

2.4 开启缓存模式cache,让第二次打包的速度快一些

2.5 terser-webpack-plugin 开启多进程打包以及压缩js

3.减少打包体积

3.1.Tree Shaking （默认webpack已经开启） 移除js中没有用到的代码，不打包到输出文件中
3.2.'@babel/plugin-transform-runtime' 减少babel打包的体积，避免重复引入。因为babel会在引入的文件中加一些辅助代码，这样就会出现重复的引入
3.3.ImageMinimizerWebpackPlugin（压缩图片），如果图片是放到本地的则需要，放到CDN上的不需要


4.优化代码运行性能

4.1代码分割（code split）
打包的时候会把所有的代码打包都一个文件中，如果加载首页会默认把所有的js都加载，这样加载体积过大，就会加载慢性能不好

代码分割：（按需加载，并行加载）
1.分割文件：将打包生成的文件进行分割，生成多个js文件
2.按需加载：需要哪个文件就加载哪个文件

预获取/预加载模块(prefetch/preload module)

prefetch(预获取)：加载所有页面
preload(预加载)：只加载当前页面

##缓存
[contenthash] 将根据资源内容创建出唯一 hash，如果内容改变当前文件的hash值就会变，否则不变


 moduleIds: 'deterministic',  //解决文件内容不变，重复打包的问题



 #处理ES6以上的语法
 core-js 
 
 通过设置babel.config.js里面useBuiltIns实现自动按需引入，这样可以减小包的大小，只引入需要的语法，而不是全部引入